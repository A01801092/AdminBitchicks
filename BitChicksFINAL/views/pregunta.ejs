<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Preguntas - BitChicks Admin</title>
  <link rel="stylesheet" href="estilos.css">
  <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@400;600&family=Itim&display=swap" rel="stylesheet">
</head>
<body>

  <header class="header">
    <h1>✨ Preguntas ✨</h1>
    <nav class="nav">
      <a href="/index">Inicio</a>
      <a href="/estadisticas">Estadísticas</a>
      <a href="/usuarios">Usuarios</a>
      <a href="/leccion">Lecciones</a>
      <a href="/pregunta">Preguntas</a>
      <a href="/lecciones">Lección</a>
      <a href="/agregar">Administradoras</a>
      <a href="/creditos">Créditos</a>
    </nav>

    <% if (admin) { %>
      <div class="logout-container">
        <form action="/logout" method="POST" style="margin: 0;">
          <button type="submit" class="logout-button">Cerrar Sesión</button>
      </div>
    <% } %>
  </header>

  <main class="main">
    <section class="usuarios">
      <div class="filtros">
        <label for="ordenar-por">Ordenar por:</label>
        <select id="ordenar-por">
          <option value="id_pregunta-asc">ID (Menor a Mayor)</option>
          <option value="id_pregunta-desc">ID (Mayor a Menor)</option>
          <option value="id_leccion-asc">ID Lección (Menor a Mayor)</option>
          <option value="id_leccion-desc">ID Lección (Mayor a Menor)</option>
          <option value="texto_pregunta-asc">Pregunta (A-Z)</option>
          <option value="texto_pregunta-desc">Pregunta (Z-A)</option>
        </select>
      </div>

      <table class="tabla-usuarios">
        <thead>
          <tr>
            <th class="sortable" data-col="id_pregunta">ID</th>
            <th class="sortable" data-col="id_leccion">ID Lección</th>
            <th class="sortable" data-col="texto_pregunta">Pregunta</th>
          </tr>
        </thead>
        <tbody id="tabla-body">
          <% pregunta.forEach(pregunta => { %>
            <tr>
              <td><%= pregunta.id_pregunta %></td>
              <td><%= pregunta.id_leccion %></td>
              <td><%= pregunta.texto_pregunta %></td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </section>
  </main>

  <footer class="footer">
    <p>&copy; 2025 BitChicks - Todos los derechos reservados para CryptoChicks</p>
  </footer>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Obtener los datos iniciales de la tabla
      const tablaBody = document.getElementById('tabla-body');
      const filas = Array.from(tablaBody.querySelectorAll('tr'));

      // Crear array de preguntas desde las filas de la tabla
      const preguntasData = filas.map(fila => {
        const celdas = fila.querySelectorAll('td');
        return {
          id_pregunta: parseInt(celdas[0].textContent),
          id_leccion: parseInt(celdas[1].textContent),
          texto_pregunta: celdas[2].textContent
        };
      });

      // Variables para el ordenamiento
      let ordenActual = '';
      let direccion = 'asc';

      // Configurar event listeners para los encabezados
      document.querySelectorAll('.sortable').forEach(th => {
        th.addEventListener('click', () => {
          const columna = th.getAttribute('data-col');
          ordenarPor(columna);
        });
      });

      // Configurar event listener para el select
      document.getElementById('ordenar-por').addEventListener('change', function() {
        const valor = this.value.split('-');
        ordenarPor(valor[0], valor[1]);
      });

      // Función para ordenar al hacer clic en los encabezados
      function ordenarPor(columna, dir = null) {
        // Determinar dirección
        if (dir) {
          direccion = dir;
        } else {
          // Cambiar dirección si es la misma columna
          if (ordenActual === columna) {
            direccion = direccion === 'asc' ? 'desc' : 'asc';
          } else {
            direccion = 'asc';
          }
        }

        ordenActual = columna;

        // Quitar clases de ordenamiento de todos los encabezados
        document.querySelectorAll('.sortable').forEach(th => {
          th.classList.remove('asc', 'desc');
        });

        // Añadir clase al encabezado actual
        const thActual = document.querySelector(`th[data-col="${columna}"]`);
        thActual.classList.add(direccion);

        // Ordenar los datos
        ordenarDatos(columna, direccion);
      }

      // Función principal de ordenamiento
      function ordenarDatos(columna, direccion) {
        preguntasData.sort((a, b) => {
          let valorA, valorB;

          switch(columna) {
            case 'id_pregunta':
              valorA = a.id_pregunta;
              valorB = b.id_pregunta;
              break;
            case 'id_leccion':
              valorA = a.id_leccion;
              valorB = b.id_leccion;
              break;
            case 'texto_pregunta':
              valorA = a.texto_pregunta.toLowerCase();
              valorB = b.texto_pregunta.toLowerCase();
              break;
            default:
              return 0;
          }

          if (valorA < valorB) return direccion === 'asc' ? -1 : 1;
          if (valorA > valorB) return direccion === 'asc' ? 1 : -1;
          return 0;
        });

        // Actualizar la tabla
        actualizarTabla();
      }

      // Función para actualizar la tabla con los datos ordenados
      function actualizarTabla() {
        tablaBody.innerHTML = '';

        preguntasData.forEach(pregunta => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${pregunta.id_pregunta}</td>
            <td>${pregunta.id_leccion}</td>
            <td>${pregunta.texto_pregunta}</td>
          `;
          tablaBody.appendChild(row);
        });
      }
    });
  </script>
</body>
</html>